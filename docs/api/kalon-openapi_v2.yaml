openapi: "3.0.3"
info:
  title: "kalon API"
  description: "kalon API"
  version: "1.0.0"
servers:
  - url: "https://kalon"
paths:
  /api/members/{id}:
    put:
      summary: "PUT api/members/{id}"
      operationId: "update"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberPartialDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MemberDTO"
    get:
      summary: "GET api/members/{id}"
      operationId: "getById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MemberDTO"
  /api/members:
    post:
      summary: "POST api/members"
      operationId: "addMember"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberCreationReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MemberDTO"
    get:
      summary: "GET api/members"
      operationId: "listAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "string"
                  format: "uuid"
  /api/members/filter:
    post:
      summary: "POST api/members/filter"
      operationId: "filterMembers"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemberFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MemberDTO"
  /api/members/{id}/contact:
    post:
      summary: "POST api/members/{id}/contact"
      operationId: "addContact"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MemberDTO"
  /api/members/{id}/participation/{eventId}/{teamId}:
    post:
      summary: "POST api/members/{id}/participation/{eventId}/{teamId}"
      operationId: "addParticipation"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "eventId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MemberDTO"
    delete:
      summary: "DELETE api/members/{id}/participation/{eventId}/{teamId}"
      operationId: "removeParticipation"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "eventId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MemberDTO"
  /api/teams/{id}:
    put:
      summary: "PUT api/teams/{id}"
      operationId: "update"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamPartialDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamDTO"
    get:
      summary: "GET api/teams/{id}"
      operationId: "getTeamInfos"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamDTO"
  /api/teams:
    post:
      summary: "POST api/teams"
      operationId: "addTeam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreationReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamDTO"
    get:
      summary: "GET api/teams"
      operationId: "list"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "string"
                  format: "uuid"
  /api/teams/filter:
    post:
      summary: "POST api/teams/filter"
      operationId: "filter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamDTO"
  /api/teams/{id}/participation/{memberId}/{eventId}:
    post:
      summary: "POST api/teams/{id}/participation/{memberId}/{eventId}"
      operationId: "addParticipant"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "memberId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "eventId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamDTO"
    delete:
      summary: "DELETE api/teams/{id}/participation/{memberId}/{eventId}"
      operationId: "removeParticipant"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "memberId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "eventId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamDTO"
  /api/events:
    post:
      summary: "POST api/events"
      operationId: "createEvent"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventCreationReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EventDTO"
    get:
      summary: "GET api/events"
      operationId: "list"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "int32"
  /api/events/filter:
    post:
      summary: "POST api/events/filter"
      operationId: "filterEvents"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EventDTO"
  /api/events/{id}:
    post:
      summary: "POST api/events/{id}"
      operationId: "updateEventInfos"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventPartialDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EventDTO"
    get:
      summary: "GET api/events/{id}"
      operationId: "getEventInfos"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EventDTO"
  /api/events/{id}/participants/{memberId}/{teamId}:
    post:
      summary: "POST api/events/{id}/participants/{memberId}/{teamId}"
      operationId: "addParticipant"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "memberId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EventDTO"
    delete:
      summary: "DELETE api/events/{id}/participants/{memberId}/{teamId}"
      operationId: "removeParticipant"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "memberId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EventDTO"
components:
  schemas:
    MemberPartialDTO:
      type: "object"
      properties:
        lastname:
          type: "string"
        firstname:
          type: "string"
        profilePictureLink:
          type: "string"
    ContactDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        platform:
          type: "string"
        link:
          type: "string"
      required:
        - "id"
        - "platform"
        - "link"
    MemberParticipationDTO:
      type: "object"
      properties:
        teamId:
          type: "string"
          format: "uuid"
        eventId:
          type: "integer"
          format: "int32"
      required:
        - "teamId"
    MemberDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        lastname:
          type: "string"
        firstname:
          type: "string"
        contacts:
          type: "array"
          items:
            $ref: "#/components/schemas/ContactDTO"
        profilePictureLink:
          type: "string"
        participations:
          type: "array"
          items:
            $ref: "#/components/schemas/MemberParticipationDTO"
      required:
        - "id"
        - "lastname"
        - "firstname"
        - "contacts"
        - "participations"
    MemberCreationReq:
      type: "object"
      properties:
        lastname:
          type: "string"
        firstname:
          type: "string"
      required:
        - "lastname"
        - "firstname"
    MemberFilter:
      type: "object"
      properties:
        teamId:
          type: "string"
          format: "uuid"
        eventId:
          type: "integer"
          format: "int32"
        nameOrder:
          type: "string"
          enum:
            - "ASC"
            - "DESC"
        limit:
          type: "integer"
          format: "int64"
    TeamPartialDTO:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
    TeamParticipationDTO:
      type: "object"
      properties:
        memberId:
          type: "string"
          format: "uuid"
        eventId:
          type: "integer"
          format: "int32"
      required:
        - "memberId"
    TeamDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        description:
          type: "string"
        participations:
          type: "array"
          items:
            $ref: "#/components/schemas/TeamParticipationDTO"
      required:
        - "id"
        - "name"
        - "participations"
    TeamCreationReq:
      type: "object"
      properties:
        name:
          type: "string"
      required:
        - "name"
    TeamFilter:
      type: "object"
      properties:
        memberId:
          type: "string"
          format: "uuid"
        eventId:
          type: "integer"
          format: "int32"
    EventCreationReq:
      type: "object"
      properties:
        year:
          type: "integer"
          format: "int32"
        name:
          type: "string"
    EventParticipantDTO:
      type: "object"
      properties:
        memberId:
          type: "string"
          format: "uuid"
        teamId:
          type: "string"
          format: "uuid"
      required:
        - "memberId"
        - "teamId"
    EventDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        year:
          type: "integer"
          format: "int32"
        debutEvent:
          type: "string"
          format: "date-time"
        finEvent:
          type: "string"
          format: "date-time"
        debutCFP:
          type: "string"
          format: "date-time"
        finCFP:
          type: "string"
          format: "date-time"
        debutInscription:
          type: "string"
          format: "date-time"
        finInscription:
          type: "string"
          format: "date-time"
        website:
          type: "string"
        participants:
          type: "array"
          items:
            $ref: "#/components/schemas/EventParticipantDTO"
      required:
        - "participants"
    EventFilter:
      type: "object"
      properties:
        yearBefore:
          type: "integer"
          format: "int32"
        yearAfter:
          type: "integer"
          format: "int32"
        hasParticipantMemberId:
          type: "string"
          format: "uuid"
        hasParticipatingTeamId:
          type: "string"
          format: "uuid"
        yearOrder:
          type: "string"
          enum:
            - "ASC"
            - "DESC"
        limit:
          type: "integer"
          format: "int64"
    EventPartialDTO:
      type: "object"
      properties:
        name:
          type: "string"
        year:
          type: "integer"
          format: "int32"
        debutEvent:
          type: "string"
          format: "date-time"
        finEvent:
          type: "string"
          format: "date-time"
        debutCFP:
          type: "string"
          format: "date-time"
        finCFP:
          type: "string"
          format: "date-time"
        debutInscription:
          type: "string"
          format: "date-time"
        finInscription:
          type: "string"
          format: "date-time"
        website:
          type: "string"